import { expect } from 'chai';
import GeoFire from 'geofire';
import FirebaseTest, { testUserUid } from './FirebaseTestConnections';

/*
 * This code snippet demonstrates how to create a listing for a user.
 *
 * A listing is automatically created in the inactive status. The user can then later move the
 * listing to be publicly or privately viewable.
 *
 * The listing is added in 3 places:
 * - The /listings endpoints which holds all listing data
 * - The /geolistings endpoint which indexes location->listing.
 * - The /userListings endpoint which indexes user+status->listing
 *
 * @title: String title of the listing, input by user.
 * @description: String description of the listing, input by user.
 * @price: Number price in dollars of the listing, input by user,
 * @imageUrls: Array of urls for the images of the listing, generated by the app.
 * @category: String category of the listing, input by user.
 * @latlon: Array of [lat, lon], generated by app from user address or from phone.
 * @uid: String user id of the seller, pulled from firebase auth by the app.
 * @firebaseDb: We pass in the database in this sample test.
 *
 * @returns: A promise fulfilled with the listing data if created successfully.
 */
function createListing(titleInput,
                       descriptionInput,
                       priceInput,
                       imageUrlsInput,
                       categoryInput,
                       latlon,
                       uid,
                       firebaseDb) {
  // TODO: Add validation of args for cleaner failures.

  const listing = {
    title: titleInput,
    description: descriptionInput,
    price: priceInput,
    imageUrls: imageUrlsInput,
    category: categoryInput,
    sellerId: uid,
    status: 'inactive',
  };

  // Get an id for the new listing.
  const newListingRef = firebaseDb.ref('/listings').push();

  const createUserListing = () => firebaseDb
    .ref('/userListings')
    .child(uid)
    .child('inactive')
    .child(newListingRef.key)
    .set(true);

  const createGeoListing = () => {
    const geoFire = new GeoFire(firebaseDb.ref('/geolistings'));
    return geoFire.set(newListingRef.key, latlon);
  };

  return newListingRef
    .set(listing)
    .then(createUserListing)
    .then(createGeoListing);
}

describe('Listing Samples', () => {
  beforeEach(function (done) {
    this.timeout(6000);

    const createTestUser = () => FirebaseTest
      .testUserApp
      .database()
      .ref('/users')
      .child(testUserUid)
      .set(FirebaseTest.getMinimalUserData());

    FirebaseTest
      .dropDatabase()
      .then(createTestUser)
      .then(done)
      .catch(done);
  });

  it('create new listing', (done) => {
    createListing('title', 'desc', 4.5, ['http://img'], 'category', [37.79, -122.41], testUserUid,
      FirebaseTest.testUserApp.database())
      .then(done)
      .catch(done);
  });
});
