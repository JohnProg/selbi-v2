import { expect } from 'chai';
import GeoFire from 'geofire';
import FirebaseTest, { testUserUid } from './FirebaseTestConnections';

/*
 * This code snippet demonstrates how to create a listing for a user.
 *
 * A listing is automatically created in the inactive status. The user can then later move the
 * listing to be publicly or privately viewable.
 *
 * The listing is added in 3 places:
 * - The /listings endpoints which holds all listing data
 * - The /geolistings endpoint which indexes location->listing.
 * - The /userListings endpoint which indexes user+status->listing
 *
 * @param title String title of the listing, input by user.
 * @param description String description of the listing, input by user.
 * @param price Number price in dollars of the listing, input by user,
 * @param imageUrls Array of urls for the images of the listing, generated by the app.
 * @param category String category of the listing, input by user.
 * @param latlon Array of [lat, lon], generated by app from user address or from phone.
 * @param uid String user id of the seller, pulled from firebase auth by the app.
 * @param firebaseDb We pass in the database in this sample test.
 *
 * @returns Promise fulfilled with the listing data if created successfully.
 */
function createListing(titleInput,
                       descriptionInput,
                       priceInput,
                       imageUrlsInput,
                       categoryInput,
                       latlon,
                       uid,
                       firebaseDb) {
  // TODO: Add validation of args for cleaner failures.

  const listing = {
    title: titleInput,
    description: descriptionInput,
    price: priceInput,
    imageUrls: imageUrlsInput,
    category: categoryInput,
    sellerId: uid,
    status: 'inactive',
  };

  // Get an id for the new listing.
  const newListingRef = firebaseDb.ref('/listings').push();

  const createUserListing = () => firebaseDb
    .ref('/userListings')
    .child(uid)
    .child('inactive')
    .child(newListingRef.key)
    .set(true);

  const createGeoListing = () => {
    const geoFire = new GeoFire(firebaseDb.ref('/geolistings'));
    return geoFire.set(newListingRef.key, latlon);
  };

  return newListingRef
    .set(listing)
    .then(createUserListing)
    .then(createGeoListing)
    .then(() => Promise.resolve(newListingRef.key));
}

/*
 * This code snippet shows how to load a single listing from the db once you have the listing's id.
 *
 * @param listingId String id of the listing to load.
 * @param firebaseDb We pass in the database in this sample test.
 *
 * @returns Promise fulfilled with DataSnapshot of the listing if the listing exists.
 */
function loadListingData(listingId, firebaseDb) {
  return firebaseDb
    .ref('/listings')
    .child(listingId)
    .once('value');
}

/*
 * This code snippet shows how to load listings based on the status, for example, load all private
 * listings for a given user.
 *
 * This is useful for loading listings of users a user is following by first loading the user's
 * friends and then loading their public and private listings. It's also useful for loading a
 * user's inventory of listings.
 *
 * @param status String status of listings to load. Must be inactive, public, private, sold,
 * salePending.
 * @param uid String user id of the user whose listings to load.
 * @param firebaseDb We pass in the database in this sample test.
 *
 * @returns Promise fulfilled with list of listings of a given status.
 */
function loadListingsByStatus(status, uid, firebaseDb) {
  return firebaseDb
    .ref('/userListings')
    .child(uid)
    .child(status)
    .once('value')
    .then((snapshot) => {
      if (snapshot.exists()) {
        return Promise.resolve(snapshot.val());
      }
      return Promise.resolve({});
    })
    .then((listingsOfStatus) => {
      const allListings = [];
      Object.keys(listingsOfStatus)
        .forEach((listingId) => {
          allListings.push(
            firebaseDb
              .ref('/listings')
              .child(listingId)
              .once('value'));
        });
      return Promise.all(allListings);
    });
}

describe('Listing Samples', () => {
  beforeEach(function (done) {
    this.timeout(15000);

    const createTestUser = () => FirebaseTest
      .testUserApp
      .database()
      .ref('/users')
      .child(testUserUid)
      .set(FirebaseTest.getMinimalUserData());

    FirebaseTest
      .dropDatabase()
      .then(createTestUser)
      .then(done)
      .catch(done);
  });

  function createTestUserListing(title) {
    return createListing(title,
      'desc',
      4.5,
      ['http://img'],
      'category',
      [37.79, -122.41],
      testUserUid,
      FirebaseTest.testUserApp.database());
  }

  it('create new listing', (done) => {
    createTestUserListing('title')
      .then((listingId) => loadListingData(listingId, FirebaseTest.testUserApp.database()))
      .then((snapshot) => {
        expect(snapshot.val().title).to.equal('title');
      })
      .then(done)
      .catch(done);
  });

  it('can load listings by status', (done) => {
    createTestUserListing('listing 1')
      .then(() => createTestUserListing('listing 2'))
      .then(() => loadListingsByStatus(
        'inactive',
        testUserUid,
        FirebaseTest.testUserApp.database()))
      .then((results) => {
        expect(results.length).to.equal(2);
        const resultTitles = [results[0].val().title, results[1].val().title];
        expect(resultTitles).contains('listing 1');
        expect(resultTitles).contains('listing 2');
      })
      .then(done)
      .catch(done);
  });
});
