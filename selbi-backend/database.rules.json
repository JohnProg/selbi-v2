{
	"rules": {
        // Mapping state to listing id for an individual user. All states take the form of
        // objects mapping listing id to true.
        "userListings" : {
            "$uid" : {
                // Only owner can read and write.
                "inactive": {
                    ".write": "$uid === auth.uid",
                    ".read": "$uid === auth.uid",
                    "$listingId" : {
                        ".validate" : "newData.isBoolean()"
                    }
                },
                // Only owner can write. Owner and friends can read.
                "private": {
                    ".write": "$uid === auth.uid",
                    ".read": "$uid === auth.uid || root.child('users/' + $uid + '/friends/' + auth.uid).exists()",
                    "$listingId" : {
                      ".validate" : "newData.isBoolean()"
                    }
                },
                // Owner can write, anyone can read.
                "public": {
                    ".write": "$uid === auth.uid",
                    ".read": true,
                    "$listingId" : {
                      ".validate" : "newData.isBoolean()"
                    }
                },
                // Only owner read. No one (except service account) can edit.
                "sold": {
                    ".write" : false,
                    ".read": "$uid === auth.uid",
                    "$listingId" : {
                      ".validate" : "newData.isBoolean()"
                    }
                },
                // Only owner read. No one (except service account) can edit.
                "salePending": {
                    ".write" : false,
                    ".read": "$uid === auth.uid",
                    "$listingId" : {
                      ".validate" : "newData.isBoolean()"
                    }
                },
                "$other": { ".validate": false }
            }
        },

        // All data about individual listings.
        "listings" : {
            // No read permissions at /listings so listings cannot be iterated over.
            "$listingId" : {
                // TODO Limit write to owner and read to allowed readers via userListings.
                ".write" : true,
                ".read" : true,

                "title" : {
                    ".validate" : "newData.isString()"
                },
                "description" : {
                    ".validate" : "newData.isString()"
                },
                "price" : {
                    ".validate" : "newData.isNumber() && newData.val() > 0"
                },
                "sellerId" : {
                    ".validate" : "newData.val() == auth.uid && root.child('/users/' + newData.val()).exists()"
                },
                "imageUrls" : {
                    // TODO: Validate are urls.
                },
                "status" : {
                    ".validate" : "newData.isString() && (newData.val() == 'inactive' || newData.val() == 'private' || newData.val() == 'public' || newData.val() == 'sold' || newData.val() == 'salePending')"
                },
                "category" : {
                    ".validate" : "newData.isString()"
                },
                "$other": { ".validate": false }
            }
        },

        // Mapping of geo data to listing id.
        "geolistings" : {
            "$listingId" : {
              // TODO Validate Geofire format.
            }
        },

        // All background data about a user.
	    "users" : {
            // No read permissions at /users so users cannot be iterated over.
	    	"$uid" : {
	    		".write": "$uid === auth.uid",
                ".read": "$uid === auth.uid",

                ".validate": "newData.hasChildren(['name', 'email', 'userAgreementAccepted'])",

                "$other": { ".validate": false },

                "userAgreementAccepted" : {
                  ".validate" : "newData.isBoolean()"
                },

	    		"name": {
                    ".validate": "newData.hasChildren(['first', 'last'])",

                    "$other": { ".validate": false },

                    "first": {
                      ".validate" : "newData.isString()"
                    },
                    "last": {
                      ".validate" : "newData.isString()"
                    }
	    		},

                "profileImageUrl" : {
                    ".validate" : "newData.isString() && newData.val().matches(/^http(s)?:/)"
                },

	    		// TODO: Validate email is valid as well.
	    		"email": {
	    			".validate" : "newData.isString()"
	    		},

                // YYYY-MM-DD
                "dateOfBirth" : {
                    ".validate": "newData.isString() && newData.val().matches(/^(19|20)[0-9][0-9][-\\/. ](0[1-9]|1[012])[-\\/. ](0[1-9]|[12][0-9]|3[01])$/)"
                },

                "phoneNumber" : {
                    ".validate" : "newData.isNumber() && newData.val() > 999999999 && newData.val() < 10000000000"
                },

                "payments" : {
                  ".validate" : "newData.hasChildren(['stripeCustomerId', 'stripeCardId', 'cardType', 'lastFour', 'expirationDate'])",

                  "$other": { ".validate": false },

                  "stripeCustomerId" : {
                      ".validate" : "newData.isString()"
                  },
                  "stripeCardId" : {
                      ".validate" : "newData.isString()"
                  },
                  "cardType" : {
                      ".validate" : "newData.isString()"
                  },
                  "lastFour" : {
                      ".validate" : "newData.isNumber() && newData.val() > 999 && newData.val() < 10000"
                  },
                  // MM-YY
                  "expirationDate" : {
                      ".validate" : "newData.isString() && newData.val().matches(/^(0[1-9]|1[0-2])-[0-9][0-9]$/)"
                  }
                },

                "merchant" : {
                    ".validate" : "newData.hasChildren(['stripeVerified'])",

                    "$other": { ".validate": false },

                    "accountNumberLast4" : {
                      ".validate" : "newData.isNumber() && newData.val() > 999 && newData.val() < 10000"
                    },
                    "routingNumber" : {
                      ".validate" : "newData.isNumber()"
                    },
                    "publicKey" : {
                      ".validate" : "newData.isString()"
                    },
                    "privateKey" : {
                      ".validate" : "newData.isString()"
                    },
                    "stripeBankId" : {
                      ".validate" : "newData.isString()"
                    },
                    "stripeManagedAccountId" : {
                      ".validate" : "newData.isString()"
                    },
                    "stripeVerified" : {
                      ".validate" : "newData.isBoolean()"
                    }
                },

                "locations" : {
                    "$other": { ".validate": false },

                    "shipTo" : {
                        ".validate" : "newData.hasChildren(['address1', 'address2', 'city', 'state', 'zip', 'country'])",

                        "$other": { ".validate": false },

                        "address1" : {
                          ".validate" : "newData.isString()"
                        },
                        "address2" : {
                          ".validate" : "newData.isString()"
                        },
                        "city" : {
                          ".validate" : "newData.isString()"
                        },
                        "state" : {
                          ".validate" : "newData.isString()"
                        },
                        "zip" : {
                          ".validate" : "newData.isNumber() && newData.val() > 9999 && newData.val() < 100000"
                        },
                        "country" : {
                          ".validate" : "newData.isString()"
                        }
                    },
                    "sellingFrom" : {
                        ".validate" : "newData.hasChildren(['address1', 'address2', 'city', 'state', 'zip', 'country'])",

                        "$other": { ".validate": false },

                        "address1" : {
                          ".validate" : "newData.isString()"
                        },
                        "address2" : {
                          ".validate" : "newData.isString()"
                        },
                        "city" : {
                          ".validate" : "newData.isString()"
                        },
                        "state" : {
                          ".validate" : "newData.isString()"
                        },
                        "zip" : {
                          ".validate" : "newData.isNumber() && newData.val() > 9999 && newData.val() < 100000"
                        },
                        "country" : {
                          ".validate" : "newData.isString()"
                        }
                    }
                }
	    	}
	    }
  	}
}
